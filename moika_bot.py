import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
)
import os

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))

# --- –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–≤—è–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
user_message_map = {}

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_name = update.message.from_user.full_name
    user_id = update.message.from_user.id

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} ({user_id}): {user_message}")

    if user_message == '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ üì®")
        return
    elif user_message == '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ üôè")
        return
    elif user_message == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await update.message.reply_text("üìç –ê–¥—Ä–µ—Å: —É–ª. –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è, 29\nüìû –¢–µ–ª: +7 (963) 822-32-01 –∏–ª–∏ 32-32-01")
        return

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É
    sent_message = await context.bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text=f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}):\n\n{user_message}"
    )
    user_message_map[sent_message.message_id] = user_id
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úÖ")

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã ---
async def handle_group_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        original_msg_id = update.message.reply_to_message.message_id
        text = update.message.text

        if original_msg_id in user_message_map:
            target_user_id = user_message_map[original_msg_id]
            await context.bot.send_message(
                chat_id=target_user_id,
                text=f"üë®‚Äçüîß –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{text}"
            )
            logging.info(f"–û—Ç–≤–µ—Ç –∏–∑ –≥—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
        else:
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º ID")
    else:
        logging.info("–û—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø–µ –±–µ–∑ reply_to_message")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, handle_message))
    app.add_handler(MessageHandler(filters.TEXT & filters.Chat(chat_id=GROUP_CHAT_ID), handle_group_reply))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
