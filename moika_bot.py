import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
CONTACT_BUTTON_URL = os.getenv("CONTACT_BUTTON_URL")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
        [KeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
        [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text("–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n–ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1")
    elif text in ["‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]:
        context.user_data['awaiting_feedback'] = text
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –µ–≥–æ –ø–æ–ª—É—á–∏–º!")
    else:
        if context.user_data.get('awaiting_feedback'):
            feedback_type = context.user_data.pop('awaiting_feedback')
            await forward_to_group(update, context, feedback_type)
        else:
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# --- –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É ---
async def forward_to_group(update: Update, context: ContextTypes.DEFAULT_TYPE, feedback_type: str):
    user = update.message.from_user
    text = f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({feedback_type}):\n–û—Ç: @{user.username or user.first_name}\nID: {user.id}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}"

    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=text)

# --- –û—Ç–≤–µ—Ç –∏–∑ –≥—Ä—É–ø–ø—ã –∫–ª–∏–µ–Ω—Ç—É ---
async def group_reply_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        lines = update.message.reply_to_message.text.splitlines()
        for line in lines:
            if line.startswith("ID: "):
                try:
                    user_id = int(line.replace("ID: ", "").strip())
                    await context.bot.send_message(chat_id=user_id, text=update.message.text)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É: {e}")
                break

# --- –ö–æ–º–∞–Ω–¥–∞ /send (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç) ---
async def send_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /send.")
        return

    post_text = ' '.join(context.args)
    bot = context.bot

    try:
        sent_message = await bot.send_message(chat_id=CHANNEL_ID, text=post_text)

        button = InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", url=CONTACT_BUTTON_URL)]
        ])

        comment_text = "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø—Ä—è–º–æ –≤ Telegram! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"

        await bot.send_message(chat_id=CHANNEL_ID, text=comment_text, reply_to_message_id=sent_message.message_id, reply_markup=button)

        await update.message.reply_text("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.")

# --- –ö–æ–º–∞–Ω–¥–∞ /sendmedia (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Ç–µ–∫—Å—Ç) ---
async def send_media_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != str(ADMIN_ID):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    caption = " ".join(context.args) if context.args else ""

    try:
        sent_message = None

        if update.message.reply_to_message:
            original = update.message.reply_to_message

            if original.photo:
                file_id = original.photo[-1].file_id
                sent_message = await context.bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=file_id,
                    caption=caption
                )

            elif original.video:
                file_id = original.video.file_id
                sent_message = await context.bot.send_video(
                    chat_id=CHANNEL_ID,
                    video=file_id,
                    caption=caption
                )

            else:
                await update.message.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
                return

        else:
            if not caption:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –º–µ–¥–∏–∞.")
                return

            sent_message = await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=caption
            )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è", url=CONTACT_BUTTON_URL)]
        ])

        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text="–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø—Ä—è–º–æ –≤ Telegram! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=keyboard,
            reply_to_message_id=sent_message.message_id
        )

        await update.message.reply_text("–ü–æ—Å—Ç —Å –º–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–¥–∏–∞-–ø–æ—Å—Ç–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("send", send_to_channel))
    app.add_handler(CommandHandler("sendmedia", send_media_post))
    app.add_handler(MessageHandler(filters.Chat(chat_id=GROUP_CHAT_ID) & filters.REPLY, group_reply_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
